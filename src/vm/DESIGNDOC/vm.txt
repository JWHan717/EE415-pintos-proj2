       	    +---------------------------+
		    |		CS 140				|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT		|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Joown Han <cony717@kaist.ac.kr>
Seoyoung Hwang <hsyng@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

None.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

None.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---added structure (page.h)---
struct vm_entry :   data structure for VM page

---added in struct vm_entry (page.h)---
struct hash_elem hashelem : hash elements for vm_entry hash table
struct file *f : file structure to load
enum vme_type type : page type
uint8_t *vaddr : virtual address
uint32_t zero_bytes : page zero bytes
uint32_t read_bytes : page read bytes
off_t offset : file offset
bool writable : if 1, file is writable 

---added type (page.h)---
enum vme_type
    VM_BIN : ELF file
    VM_ANON : anonymous page
    VM_FILE : file backed page

---added in struct thread (thread.h)---
struct hash vm : Hash table to manage virtual address space of thread
void *esp : stack pointer

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

We store information of page in vm_entry.
When page fault occurs, we allocate frame in lru list to the vm_entry.
If there are no frame to allocate,
we select a victim page and swap it out. 


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

When a page frame is swaped out, we check dirty bit from the page directory.
If dirty bit is '1', write to the swap partition or file before free the page.
If access bit is '1' we do not select the page to victim.
We use pagedir_is_dirty and pagedir_is_accessed function to check the bits.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We used frame lock to avoid race condition.
When a process allocate a new frame, it acquire the frame lock.
Thus, other processes are prevented to allocate a new frame.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We use page directory to map virtual address to physical address.
It can contain mapping and also access bit, dirty bit.
We added physical page frame structure that has reference to the virtual
page structure to which physical page is mapped and physical address.
Thus we can implement swaping and can handle multiple type of pages.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


---added in struct vm_entry (page.h)---
size_t swap_idx : swap partition index
bool pinned : pinning flag
bool loaded : check whether loaded

---added structure (page.h)---
struct page : physical page frame

---added in struct page (page.h)---
uint8_t *kaddr : physical address of page 
struct vm_entry *vme : reference to the virtual page object 
struct thread *t : Reference to the thread to which it belongs 
struct list_elem lru_elem : list element for lru list
bool pinned : pinning flag

---added global variables (frame.c)---
static struct list lru_list : List of physical pages allocated to user process
static struct list_elem *lru_ptr : 
static struct lock frame_lock : 

---added global variables (swap.c)---
static struct block *swap_block : swap partition
static struct bitmap *swap_bitmap : swap bitmap
static size_t swap_size : number of slots in swap partition
static const size_t SLOTS = PGSIZE / BLOCK_SECTOR_SIZE : size of slot


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We used clock algorithm. Iterate through lru_list, and find/return 
a page where unpinned and not accessed.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

We called pagedir_clear_page, so that marks user virtual page "not present" 
in page directory of current thread.


>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

When fault address is outside of stack and the access is within 32bytes
of stack top, we expanded stack.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We can prevent one of the necessary conditions for deadlock.
We prevent evicting the pages accessed during system call.
We added pinning flag in page structure.
Pin the page frame on system call and unpin when return.
Thus, when select victim page for swap out, don't select a pinned page. 


>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

When evicting physical frame, it acquires frame lock.
Thus prevent other processes.


>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

We set pinning flag of page on system call.
process doesn't select pinned page to evict.
Thus we can protect the page.


>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

In function valid_address, if address is user virtual address,
call pagedir_get_page to looks up the physical address that corresponds to
user virtual address in page directory. If there is nothing, allocate
new page using expand_stack function.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We chose first design, because it is more simple and safe. 

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---added in struct vm_entry (page.h)---
struct list_elem mmap_vme_elem : list element for mmaped file vme list

---added in struct thread (thread.h)---
struct list mmap_list : mmaped file list

---added typedef (syscall.h)---
typedef int mapid_t : mapping id

---added structure (syscall.h)---
struct mmap_file : Data structure containing information from mapped files

---added in struct mmap_file (syscall.h)---
mapid_t mapid : mapping id
struct file *f : mapping file object
struct list_elem mmap_elem : list element for mmap_file list
struct list vme_list : vm_entry list

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

mmaped file has list of vm entries. When mapping file, vm entries are
created, and then inserted in virtual page pool.
When page fault occurs, We allocate page frame and load data from 
file object stored in vme structure.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

check vm page hash tables whether there exist vm entry with that address.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

In mmap function, we reopen the file to handle the file independently
for each mapping.
We did not share phsyical frame for same file mapping which is same for
demand-paged from executables.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
