             +--------------------------+
             |          CS 140          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Joown Han <cony717@kaist.ac.kr>
Seoyoung Hwang <hsyng@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

None.


               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

start_process() first uses strtok_r() to parse the command line, and
stores the parsed strings in an array. It then calls the static function
argument_stack(), which takes argc, argv, and the address of esp as input.
Since the argument is stored in a stack, the elements of argv[] has
to be stacked in reverse order. In order to do this, we used reverse
indexing (using argc) to stack the elements from left to right.
We avoided stack page overflow by limiting the length of addr[], the
array that stores the start addresses of argv.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() is a wrapper function that calls strtok_r() in its implementation.
In other words, strtok() and strtok_r() does the same thing, but strtok()
defines the save pointer (**save_ptr) as a static variable when called.
Since static variables are stored in the data segment instead of the local
stack area, these variables are prone to access from other threads in the
middle of execution. Thus, in multi-process operating systems like Pintos,
it would be safer to use atomic operations like strtok_r().


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Compared with the shell, the kernel is a relatively low-level process.
This difference gives the Unix approach the following advantages:

(1) Safer from memory corruption
The kernel is the layer of the hardware that performs memory management.
Performing argument parsing in the kernel memory area can potentially
result in memory corruption, which is often fatal to the entire system.
The Unix approach is safer because it modifies data in the user memory.

(2) Easier for the user to access
Because the kernel has direct access to the hardware, it is difficult
for the user to understand what is happening in an intuitive manner.
The shell, more verbose and accessible, can help the user have easier
access to reading and writing with files.


                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

-- added to struct thread (thread.h) --
    int exit_status : exit status of the thread
    int exit_flag : detect threads that are not correctly exited (load fail)
    struct thread *parent : parent process
    struct list children : child process list
    struct list_elem child_elem : child process list element
    struct semaphore wait_sema : for process_wait
        holds the parent process from exiting until the child process exits
    struct semaphore delete_sema : for process_wait
        holds the child process from dying before the resources are freed
    struct semaphore load_sema : wait for the successful load

    struct list handlers : list of signal handlers registered to the thread
    int signals[128] : store whether signal is recieved
    

    struct file *fd[128] : file descriptors


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

    When opening files, files are assigned to new file descriptors.
    open() function skims file descriptors and allocate an unassigned file
    desciptor to the newly opened file.
    If an opened file already has file descriptor, the function closes the
    existing one.
    A single thread owns its unique file descriptors.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

read system call recieves file descriptor, buffer, and size from user.
After check aderresses are valid, it reads data.
If fd is 0 function reads data from stdin and store to the buffer.
otherwise, if fd is valid, it reads from file whose fd is given value.
For safety, read function use file_lock.
After reading, function returns the number of bytes actually read.
write system call recieves file descriptor, buffer, and size from user.
After check aderresses are valid, it writes data.
If fd is 1 function writes buffer data to stdout.
otherwise, if fd is valid and file doesn't deny writing, it writes to file whose fd is given value.
After writing, function returns the actual number written.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Since page entries are allocated to a process in page units regardless
of the memory it uses, both the full page system call and 2 byte system
call will be allocated an entire page. Therefore, the greatest and least
possible numbers of page table inspections will also be the same for
both cases.
    greatest: == number of total page table entries (every page is allocated)
    least: 1 (find unallocated page at first hit)

The use of TLB can reduce the number of inspections, but the rate of
improvement will be greater for the full page case because a larger
chunk of memory possesses more spatial locality.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The wait system call passes pid to process_wait().
process_wait() searches for a child thread of the current process that
matches the given tid, and then blocks the caller (parent thread)
until the child process exits by calling sema_down().
Once child process exits, process_wait() deallocates the descriptor of
child process and returns the exit status of exited child.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We added the exit_status value to the thread structure, and set its
initial value to -2. An exit_status value of -2 is impossible in a
normally exited process, which indicates any thread with exit_status
-2 (at the time of main thread exit) is an abnormally aborted process.
This value triggers immediate exit(-1), which leaves the memory still being
occupied. However, the exit_flag variable of the child informs the parent
about unfreed resources. process_execute() of the parent thread detects
this flag and collects this garbage memory by calling process_wait().


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We used the structure load_sema.
process_execute() calls sema_down() to wait until child process successfully
loads the new excutable.
The child process calls sema_up() when load() is complete, regardless of
success. The parent process is informed about completion, and whether the
child's load() succeeded or failed is passed by exit() and exit_flag.


>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

P must not exit until C exits, and the resources occupied by C are
completely freed. To ensure this, we used two semaphore structures;
one to ensure the order of exit, and another to ensure the order of
resource freeing.
    - P calls wait(C) before C exits: sema_down(wait_sema) in wait(C)
    waits for C to increment the semaphore when C exits.
    - P calls wait(C) after C exits: sema_down(delete_sema) in
    process_exit() ensures that C does not die completely before P
    fetches necessary values from the child.
    - P terminates without waiting before/after C exits: these cases
    do not happen normally, unless C exits due to an exception
    (e.g., page fault)
    - Special cases: In such cases, P makes sure that remaining memory
    is collected by checking several variables held by C.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We chose to verify the validity of a user-provied pointer, and then
exit if the pointer is invalid.
It is more simple and intuitive than modifying page_fault function.
And we don't need to declare new function.


>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

We used an array of pointers to file objects.
This enabled us to directly access the files with file descriptor.
Although it takes less space than storing file objects directly, the array
still takes up some memory even when no file is allocated.


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We used the default identity mapping, as direct casting is convenient when
calling various functions.


               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?